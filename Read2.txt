Инструкция по работе с языком программирования lpibydevcoder  
#-----------------------------#

Введение  
lpibydevcoder — минималистичный язык программирования для работы с базовыми вычислениями, вводом-выводом и простыми функциями. Он работает как интерпретируемый язык поверх Python, где исходный код парсится и выполняется через модули lexer, parser и interpreter.  
#-----------------------------#

Основные возможности языка  
- Арифметические операции: +, -, *, /  
- Ввод с клавиатуры: функция ind()  
- Вывод на экран: функция pr()  
- Преобразование в строку: sr()  
- Строковые литералы в двойных кавычках "текст"  
- Обработка ошибок: оператор ! (TRY_FUNC)  
- Подключение стилей: st()  
- Определение функций (ограниченная поддержка)  
- Переменные и присваивание с помощью оператора =  
- Скобки для группировки выражений  
#-----------------------------#

Как писать и выполнять код  
Пример присваивания и работы с переменными  

x = 10
y = 20
pr(x + y)  # Ожидаемый вывод: 30

#-----------------------------#

Ввод и вывод  

pr("Введите число:")
num = ind()
pr("Вы ввели: " + sr(num))

- ind() — считывает ввод как строку.  
- pr() — выводит значение на экран.  
- Для конкатенации чисел и строк используйте sr() для преобразования чисел к строкам.  
#-----------------------------#

Арифметические выражения  

pr(2 + 3 * (4 - 1))  # Выведет 11
pr(sr(123))         # Выведет "123"

#-----------------------------#

Обработка ошибок  
Чтобы безопасно выполнять операции, которые могут вызвать ошибки (например, деление на ноль):  

!(pr(1 / 0), pr("Ошибка: деление на ноль!"))

Если первая часть вызовет ошибку, будет выполнена вторая.  
#-----------------------------#

Определение функций  

def myfunc():
    pr("Привет от функции")

Поддержка функций пока ограничена, вызовы осуществляются через внутренние механизмы парсера.  
#-----------------------------#

Особенности запуска кода из Python  
Чтобы запускать код lpibydevcoder из Python, используйте функцию run_code, которая принимает строку с кодом языка.  

ВАЖНО  
Нельзя напрямую передавать конструкции языка с синтаксисом вроде:  

run_code(!(pr(1 / 0), pr("Ошибка: деление на ноль!")))

Это вызовет ошибку SyntaxError в Python, так как !, запятая и пр. не являются валидным Python кодом.  

Правильный способ — передавать код как строку:  

run_code('!(pr(1 / 0), pr("Ошибка: деление на ноль!"))')


Полный пример запуска из Python:  

from lpibydevcoder import run_code

code = 
pr("Hello, World!")
x = 5
y = 10
pr(x + y)


run_code(code)

#-----------------------------#

Архитектура языка  
- Lexer — преобразует исходный код в поток токенов.  
- Parser — строит синтаксическое дерево из токенов, реализует грамматику.  
- Interpreter — выполняет дерево, вычисляет значения, управляет переменными, вводом/выводом.  
#-----------------------------#

Что планируется добавить и улучшить  
- Расширение типов данных (например, float, boolean)  
- Поддержка функций с параметрами и локальными переменными  
- Реализация циклов и условной логики (if, while, for)  
- Улучшенная обработка ошибок  
- Поддержка модулей и импортов  
#-----------------------------#

Пример простого калькулятора на lpibydevcoder  

pr("Введите первое число:")
a = ind()
pr("Введите второе число:")
b = ind()
pr("Сумма равна: " + sr(a + b))
